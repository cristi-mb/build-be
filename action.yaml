name: Build BE
description: Build and publish backend
branding:
  icon: package
  color: blue
inputs:
  aws-access-key:
    description: 'AWS Secret Key ID'
    required: true
  aws-secret-access-key:
    description: 'AWS Secret Access Key'
    required: true
  aws-region:
    description: 'AWS Region of the S3 and CloudFront resources'
    required: false
    default: 'us-east-1'
  ecr-repository:
    description: 'Amazon ECR Repository to publish the image to'
    required: true
  slack-channel:
    description: 'Name of the Slack channel used for CI alerts'
    required: false
    default: ''
  slack-token:
    description: 'Token for Slack integration'
    required: false
    default: ''
  docker-path:
    description: 'Path to the Dockerfile'
    required: false
    default: './'
  docker-context-folder:
    description: 'Path to Docker context'
    required: false
    default: '.'
  build-envs:
    description: 'Environment variables passed used for building the application'
    required: false
    default: ''
  submodules:
    description: 'Enable if submodules need to be initialised'
    required: false
    default: false
  submodules-key:
    description: 'SSH Key for cloning and initialising the submodules'
    required: false
    default: ''
  custom-image-tag:
    description: 'String to override the default image tag (commit hash) with.'
    required: false
    default: ''
  tag-prefix:
    description: 'String to append before the commit hash in the tag. Used for Flux Image Automation'
    required: false
    default: ''
  tag-suffix:
    description: 'String to append after the commit hash in the image tag. Used for Flux Image Automation'
    required: false
    default: ''
outputs:
  image-tag:
    description: "Published image tag"
    value: ${{ steps.set-tag.outputs.image-tag }}
runs:
  using: "composite"
  steps:  
    - name: Notify Slack Start
      if: ${{ (inputs.slack-channel != '') && (inputs.slack-token != '') }}
      id: notify-slack-start
      uses: cristi-mb/slack-notify@main
      with:
        message-type: 'start'
        slack-channel: ${{ inputs.slack-channel }}
        slack-bot-token: ${{ inputs.slack-token }}
        
    - name: Checkout
      id: checkout
      uses: actions/checkout@v4
      
    - name: Checkout submodules
      id: submodules
      if: ${{ inputs.submodules }} == true
      run: |
        mkdir $HOME/.ssh && echo "$SSH_KEY" > $HOME/.ssh/id_rsa && chmod 600 $HOME/.ssh/id_rsa && git submodule update --init --recursive
      env:
        SSH_KEY: ${{ inputs.submodules-key }}
      shell: bash

    - name: Set image tag
      id: set-tag
      run: |
        if [[ $CUSTOM_IMAGE_TAG == "" ]]; then
          echo "image-tag=$TAG_PREFIX$(echo ${GITHUB_SHA} | cut -c1-7)$TAG_SUFFIX" >> $GITHUB_OUTPUT
        else
          echo "image-tag=$CUSTOM_IMAGE_TAG" >> $GITHUB_OUTPUT
        fi
      env:
        CUSTOM_IMAGE_TAG: ${{ inputs.custom-image-tag }}
        TAG_PREFIX: ${{ inputs.tag-prefix }}
        TAG_SUFFIX: ${{ inputs.tag-suffix }}
      shell: bash

    - name: Configure AWS credentials
      id: configure-aws
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set envs
      id: set-envs
      run: |
        ARGS=""
        
        while IFS= read -r line; do      
          if [[ -z "$line" ]]; then
            continue
          fi

          key=$(echo "$line" | cut -d '=' -f 1 | tr -d ' ')
          value=$(echo "$line" | cut -d '=' -f 2- | tr -d ' ')

          ARGS="$ARGS --build-arg $key=$value"
        done <<< "${{ inputs.build-envs }}"

        echo "build-args=$ARGS" >> $GITHUB_ENV
      shell: bash
    
    - name: Build, tag and push the image
      id: build-push
      run: |
        docker build $build-args \
          -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} \
          -f ${GITHUB_WORKSPACE}/${DOCKER_PATH}/Dockerfile ${GITHUB_WORKSPACE}/${DOCKER_CONTEXT_FOLDER}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${IMAGE_TAG}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.ecr-repository }}
        IMAGE_TAG: ${{ steps.set-tag.outputs.image-tag }}
        DOCKER_PATH: ${{ inputs.docker-path }}
        DOCKER_CONTEXT_FOLDER: ${{ inputs.docker-context-folder }}
        BUILD_ARGS: ${{ steps.set-envs.outputs.build-args }}
      shell: bash
        
    - name: Logout from Amazon ECR
      id: logout-ecr
      if: always()
      run: |
        docker logout ${{ steps.login-ecr.outputs.registry }}
      shell: bash

    - name: Notify Slack Result
      if: ${{ always() && (inputs.slack-channel != '') && (inputs.slack-token != '') }}
      uses: cristi-mb/slack-notify@main
      with:
        message-type: 'results'
        slack-channel: ${{ inputs.slack-channel }}
        slack-bot-token: ${{ inputs.slack-token }}
        message-ts: ${{ steps.notify-slack-start.outputs.message-ts }}
        steps-context: "'${{ toJson(steps) }}'"
