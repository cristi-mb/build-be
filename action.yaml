name: Build BE
description: Build and publish backend
branding:
  icon: package
  color: blue
inputs:
  aws-access-key:
    description: 'AWS Secret Key ID'
    required: true
  aws-secret-access-key:
    description: 'AWS Secret Access Key'
    required: true
  aws-region:
    description: 'AWS Region of the S3 and CloudFront resources'
    required: true
  slack-channel:
    description: 'Name of the Slack channel used for CI alerts'
    required: true
  slack-token:
    description: 'Token for Slack integration'
    required: true
  ecr-repository:
    description: 'Amazon ECR Repository to publish the image to'
    required: true
  docker-path:
    description: 'Path to the Dockerfile'
    required: false
    default: ''
outputs:
  image-tag:
    description: "Published image tag"
    value: ${{ steps.set-tag.outputs.image-tag }}
runs:
  using: "composite"
  steps:  
    - name: Notify Slack Start
      id: notify-slack-start
      uses: cristi-mb/slack-notify@main
      with:
        message-type: 'start'
        slack-channel: ${{ inputs.slack-channel }}
        slack-bot-token: ${{ inputs.slack-token }}
        
    - name: Checkout
      id: checkout
      uses: actions/checkout@v3.2.0
      with:
        submodules: recursive

    - name: Set image tag
      id: set-tag
      run: echo "image-tag=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT
      shell: bash

    - name: Configure AWS credentials
      id: configure-aws
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag and push the image
      id: build-push
      run: |
        docker build \
          -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} \
          ${GITHUB_WORKSPACE}/${DOCKER_PATH}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${IMAGE_TAG}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.ecr-repository }}
        IMAGE_TAG: ${{ steps.set-tag.outputs.image-tag }}
        DOCKER_PATH: ${{ inputs.docker-path }}
      shell: bash
        
    - name: Logout from Amazon ECR
      id: logout-ecr
      if: always()
      run: |
        docker logout ${{ steps.login-ecr.outputs.registry }}
      shell: bash

    - name: Notify Slack Result
      if: always()
      uses: cristi-mb/slack-notify@main
      with:
        message-type: 'results'
        slack-channel: ${{ inputs.slack-channel }}
        slack-bot-token: ${{ inputs.slack-token }}
        message-ts: ${{ steps.notify-slack-start.outputs.message-ts }}
        steps-context: "'${{ toJson(steps) }}'"
